{"version":3,"sources":["components/AddHero.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddHero","setHeroes","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","initialState","console","error","type","value","onChange","target","getGifs","hero","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","log","useFetchGifs","GifExpertApp","heroes","heroe","ReactDOM","render","document","getElementById"],"mappings":"0MAGe,SAASA,EAAT,GAAiC,IAAdC,EAAa,EAAbA,UAC9B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAU,SAACS,GAAD,OAAmBP,GAAnB,mBAAkCO,OAC5CN,EAAc,KACXO,QAAQC,MAAM,oEAMrB,SACI,uBACIC,KAAK,OACLC,MAAOX,EAEPY,SArBW,SAACT,GACpBF,EAAcE,EAAEU,OAAOF,Y,kCCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAC3FH,GAFe,sBAKAI,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCYLO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,yBAAQc,UAAU,yCAAlB,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAYI,UAAU,iBAAtB,SAAwCJ,QC6CrCO,MA/Cf,YAA4B,IAATnB,EAAQ,EAARA,KAcPO,EChBgB,SAACP,GACzB,MAA0BhB,mBAAS,CAAEuB,KAAM,GAAIa,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OAVAC,qBAAU,WACNxB,EAAQC,GAAMwB,MAAK,SAACC,GAChBhC,QAAQiC,IAAID,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDGUM,CAAa3B,GAAtBO,KAER,OACI,qCACI,oBAAIS,UAAU,oCAAd,SAAmDhB,IAYnD,qBAAKgB,UAAU,gBAAf,SACKT,EAAKE,KAAI,SAACC,GAAD,OACN,cAAC,EAAD,2BAA8BA,GAA9B,IAAmCM,UAAU,SAA3BN,EAAIC,aER3BiB,EAzBM,WAEjB,MAA4B5C,mBAAS,CAAC,YAAtC,mBAAO6C,EAAP,KAAe9C,EAAf,KAOA,OACI,qCACI,oBAAIiC,UAAU,oCAAd,0BACA,cAAClC,EAAD,CAASC,UAAWA,IACpB,uBAKC8C,EAAOpB,KAAI,SAACqB,GAAD,OACR,cAAC,EAAD,CAAqB9B,KAAM8B,GAAbA,U,MClB9BC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.e4f02855.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function AddHero({ setHeroes }) {\r\n    const [inputValue, setInputValue] = useState(\"\"); //useState tiene valor undefined por defecto\r\n\r\n    const handleOnChange = (e) => {\r\n        setInputValue(e.target.value);\r\n        // console.log(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 0) {\r\n            setHeroes((initialState) => [inputValue, ...initialState]);\r\n            setInputValue(\"\");\r\n        } else console.error(\"input void, please enter a hero name before submit your request\");\r\n\r\n        // console.log(\"submit:\", inputValue);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                // placeholder=\"Nuevo heroe\"\r\n                onChange={handleOnChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\n//validacion de requrimiento de setHeroes como proptype\r\nAddHero.propTypes = {\r\n    setHeroes: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (hero) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=NFxoxsrYkc0d1jXPTyypk9DB5KUHltu1&q=${encodeURI(\r\n        hero\r\n    )}&limit=10`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n    }));\r\n    // console.log({ gifs });\r\n    return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    // console.log(id, title, url);\r\n    return (\r\n        <figure className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <figcaption className=\"card-img_title\">{title}</figcaption>\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","// import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nfunction GifGrid({ hero }) {\r\n    // const [images, setImages] = useState([]);\r\n\r\n    /*\r\n    const [counter, setCounter] = useState(0)\r\n\r\n    //useEffect([func], [dependencies])\r\n    */\r\n    // useEffect(() => {\r\n    //     getGifs(hero).then((imgs) => setImages(imgs));\r\n    // }, [hero]);\r\n\r\n    //getGifs();\r\n\r\n    const { data } = useFetchGifs(hero);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{hero}</h3>\r\n\r\n            {/* usando map para imprimir titulos\r\n            <ol>\r\n                {images.map(({ id, title }) => (\r\n                    <li key={id}>{title}</li>\r\n                ))}\r\n            </ol> */}\r\n            {/* Necesarios para ver que hace useEffect\r\n                <h3>{counter}</h3>\r\n                <button type=\"submit\" onClick={() => setCounter(counter + 1)}>+1</button>\r\n            */}\r\n            <div className=\"gif-container\">\r\n                {data.map((img) => (\r\n                    <GifGridItem key={img.id} {...img} className=\"grid\">\r\n                        {\r\n                            // spread de las props de img (herencia)\r\n                        }\r\n                    </GifGridItem>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    hero: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (hero) => {\r\n    const [state, setState] = useState({ data: [], loading: true });\r\n\r\n    useEffect(() => {\r\n        getGifs(hero).then((imgs) => {\r\n            console.log(imgs);\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [hero]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddHero from \"./components/AddHero\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    // const heroes = [\"saitama\", \"goku\", \"tanjiro\"];\r\n    const [heroes, setHeroes] = useState([\"Saitama\"]);\r\n\r\n    // const handleAdd = () => {\r\n    //     setHeroes((initialState) => [...initialState, \"luffy\"]);\r\n    //     // console.log(typeof heroes);\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__bounce\">GifExpertApp</h2>\r\n            <AddHero setHeroes={setHeroes} />\r\n            <hr></hr>\r\n            {/* <button type=\"submit\" onClick={handleAdd}>\r\n                add\r\n            </button> */}\r\n\r\n            {heroes.map((heroe) => (\r\n                <GifGrid key={heroe} hero={heroe}></GifGrid>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport GifExpertApp from \"./GifExpertApp\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}